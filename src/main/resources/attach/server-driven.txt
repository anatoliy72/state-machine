@startuml
title Server-driven /advance flow

actor Client
participant "ProcessController" as C
participant "FlowService" as S
collections "StepPlan\n(type,state)->event" as Plan
participant "Preconditions\n(validators)" as Pre
participant "StateMachine\n(Spring SM)" as SM
database "DB\n(ProcessInstance)" as DB

== Advance call ==
Client -> C: POST /process/{id}/advance\n{ data? }
C -> S: advance(id, data)

S -> DB: findById(id)
DB --> S: instance{type, state, vars}

S -> Plan: nextEvent = lookup(type, state)
Plan --> S: e.g. KYC_VERIFIED

S -> Pre: validate(type, state, data, vars)
alt all good
  Pre --> S: OK
  S -> SM: getStateMachine(id)
  S -> SM: stop()
  S -> SM: reset(state = instance.state)
  S -> SM: putExtended(type, vars+data)
  S -> SM: start()
  S -> SM: sendEvent(nextEvent)

  alt accepted
    SM --> S: newState
    S -> DB: save(state=newState, vars+=data)
    DB --> S: instance'
    S --> C: instance'
    C --> Client: 200 { state=newState, screenCode=map(newState) }
  else not accepted
    S --> C: IllegalStateException("Event not accepted")
    C --> Client: 400/500
  end
else failed preconditions
  Pre --> S: missing=[...]
  S --> C: 409 { error=PRECONDITIONS_NOT_MET, missing=[...] }
end
@enduml
