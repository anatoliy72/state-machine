@startuml
title RAW /event flow (client-driven)

actor Client
participant "ProcessController" as C
participant "FlowService" as S
participant "StateMachine\n(Spring SM)" as SM
database "DB\n(ProcessInstance)" as DB

== Start ==
Client -> C: POST /process/start\n{ clientId, type, initialData }
C -> S: startProcess(...)
S -> DB: save(ProcessInstance{state=STARTED})
DB --> S: instance
S --> C: instance
C --> Client: 200 { id, state=STARTED, screenCode=s500.1 }

== Explicit Event ==
Client -> C: POST /process/{id}/event\n{ event=KYC_VERIFIED, data={...} }
C -> S: handleEvent(id, KYC_VERIFIED, data)

S -> DB: findById(id)
DB --> S: instance{state=?}

S -> SM: getStateMachine(id)
S -> SM: stop()
S -> SM: reset(state = instance.state)
S -> SM: putExtended( type, variables+data )
S -> SM: start()
S -> SM: sendEvent(KYC_VERIFIED)

alt accepted
  SM --> S: newState = WAITING_FOR_BIOMETRY
  S -> DB: save(state=WAITING_FOR_BIOMETRY, vars+=data)
  DB --> S: instance'
  S --> C: instance'
  C --> Client: 200 { state=WAITING_FOR_BIOMETRY, screenCode=s510.2 }
else not accepted
  S --> C: IllegalStateException("Event not accepted")
  C --> Client: 400/409/500 (configured)
end
@enduml
