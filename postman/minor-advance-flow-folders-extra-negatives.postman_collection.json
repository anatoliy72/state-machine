{
  "info": {
    "name": "Server-driven Advance Flow - Minor (Folders + Extra Negatives)",
    "_postman_id": "adv-folders-ext-20250815223038Z",
    "description": "Organized by folders. Adds separate negative scenarios including ScanMatch FAIL x3 (numbered), STT block, Address 409s, and Forms 409s.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    },
    {
      "key": "processId_hp",
      "value": ""
    },
    {
      "key": "processId_decline",
      "value": ""
    },
    {
      "key": "processId_block",
      "value": ""
    },
    {
      "key": "processId_neg",
      "value": ""
    },
    {
      "key": "processId_sm_fail",
      "value": ""
    },
    {
      "key": "processId_stt_block",
      "value": ""
    },
    {
      "key": "processId_addr_409",
      "value": ""
    },
    {
      "key": "processId_forms_409",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "01 - Happy Path (Subscribe Service)",
      "item": [
        {
          "name": "1. Start Process - Happy Path",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_hp\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_hp', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "Plan STARTED->START_FLOW",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"High School\",\n    \"grade\": \"10th Grade\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 2000,\n    \"expenseCategories\": [\n      \"Food\",\n      \"Transport\",\n      \"Entertainment\"\n    ],\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID123456789\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (not blocked) → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"audioFile\": \"audio_recording.wav\",\n    \"transcription\": \"I confirm that all information provided is accurate\",\n    \"confidence\": 0.95,\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Doc match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\",\n    \"confidence\": 0.98,\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.98\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Upload face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"faceImage\": \"face_photo.jpg\",\n    \"livenessScore\": 0.95,\n    \"faceMatchScore\": 0.92\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\",\n    \"validationScore\": 0.95,\n    \"riskLevel\": \"LOW\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"signatureImage\": \"signature.png\",\n    \"signatureQuality\": \"HIGH\",\n    \"signatureMatchScore\": 0.9\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"activities\": [\n      \"Online Banking\",\n      \"Mobile Banking\",\n      \"ATM Withdrawals\"\n    ],\n    \"preferredChannels\": [\n      \"Mobile\",\n      \"Online\"\n    ],\n    \"expectedTransactions\": 50\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"selectedPackage\": \"STUDENT_BASIC\",\n    \"packageFeatures\": [\n      \"No monthly fee\",\n      \"Free ATM withdrawals\",\n      \"Student discounts\"\n    ],\n    \"packageId\": \"STU001\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Video (continue) → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"videoFile\": \"verification_video.mp4\",\n    \"videoDuration\": 30,\n    \"livenessScore\": 0.95,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"addressType\": \"RESIDENTIAL\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Branch → INFORMATION_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"branchId\": \"BR001\",\n    \"branchName\": \"Downtown Branch\",\n    \"branchAddress\": \"456 Downtown Ave\",\n    \"preferredTime\": \"MORNING\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INFORMATION_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INFORMATION_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Info → TWO_MORE_QUESTIONS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"communicationPreferences\": [\n      \"EMAIL\",\n      \"SMS\"\n    ],\n    \"marketingConsent\": true,\n    \"newsletterSubscription\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == TWO_MORE_QUESTIONS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('TWO_MORE_QUESTIONS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Additional Q → SERVICE_SUBSCRIPTION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"question1\": \"What is your favorite color?\",\n    \"answer1\": \"Blue\",\n    \"question2\": \"What was your first pet's name?\",\n    \"answer2\": \"Buddy\",\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SERVICE_SUBSCRIPTION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SERVICE_SUBSCRIPTION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "19. Subscribe → FORMS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"privateInternetSubscriptionIndication\": \"0\",\n    \"servicePartyStatusCode\": 1,\n    \"selectedServices\": [\n      \"Online Banking\",\n      \"Mobile App\",\n      \"SMS Alerts\"\n    ]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FORMS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FORMS'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "20. Forms → WARNINGS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"formsCompleted\": [\n      \"Account Agreement\",\n      \"Privacy Policy\",\n      \"Terms of Service\"\n    ],\n    \"signatureTimestamp\": \"2024-01-15T10:30:00Z\",\n    \"ipAddress\": \"192.168.1.100\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WARNINGS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WARNINGS'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Acknowledge → WELCOME",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"warningsAcknowledged\": [\n      \"Account fees\",\n      \"Transaction limits\",\n      \"Security responsibilities\"\n    ],\n    \"acknowledgmentTimestamp\": \"2024-01-15T10:35:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WELCOME', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WELCOME'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Complete → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_hp}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_hp}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"welcomeMessage\": \"Welcome to our banking services!\",\n    \"completionTimestamp\": \"2024-01-15T10:40:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "02 - Branch: Decline Service",
      "item": [
        {
          "name": "1. Start Process - Decline Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_decline\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_decline', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "Plan STARTED->START_FLOW",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"High School\",\n    \"grade\": \"10th Grade\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 2000,\n    \"expenseCategories\": [\n      \"Food\",\n      \"Transport\",\n      \"Entertainment\"\n    ],\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID123456789\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (not blocked) → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"audioFile\": \"audio_recording.wav\",\n    \"transcription\": \"I confirm that all information provided is accurate\",\n    \"confidence\": 0.95,\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Doc match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\",\n    \"confidence\": 0.98,\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.98\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Upload face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"faceImage\": \"face_photo.jpg\",\n    \"livenessScore\": 0.95,\n    \"faceMatchScore\": 0.92\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\",\n    \"validationScore\": 0.95,\n    \"riskLevel\": \"LOW\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"signatureImage\": \"signature.png\",\n    \"signatureQuality\": \"HIGH\",\n    \"signatureMatchScore\": 0.9\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"activities\": [\n      \"Online Banking\",\n      \"Mobile Banking\",\n      \"ATM Withdrawals\"\n    ],\n    \"preferredChannels\": [\n      \"Mobile\",\n      \"Online\"\n    ],\n    \"expectedTransactions\": 50\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"selectedPackage\": \"STUDENT_BASIC\",\n    \"packageFeatures\": [\n      \"No monthly fee\",\n      \"Free ATM withdrawals\",\n      \"Student discounts\"\n    ],\n    \"packageId\": \"STU001\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Video (continue) → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"videoFile\": \"verification_video.mp4\",\n    \"videoDuration\": 30,\n    \"livenessScore\": 0.95,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"addressType\": \"RESIDENTIAL\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Branch → INFORMATION_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"branchId\": \"BR001\",\n    \"branchName\": \"Downtown Branch\",\n    \"branchAddress\": \"456 Downtown Ave\",\n    \"preferredTime\": \"MORNING\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INFORMATION_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INFORMATION_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Info → TWO_MORE_QUESTIONS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"communicationPreferences\": [\n      \"EMAIL\",\n      \"SMS\"\n    ],\n    \"marketingConsent\": true,\n    \"newsletterSubscription\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == TWO_MORE_QUESTIONS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('TWO_MORE_QUESTIONS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Additional Q → SERVICE_SUBSCRIPTION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"question1\": \"What is your favorite color?\",\n    \"answer1\": \"Blue\",\n    \"question2\": \"What was your first pet's name?\",\n    \"answer2\": \"Buddy\",\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SERVICE_SUBSCRIPTION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SERVICE_SUBSCRIPTION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Decline → NO_SERVICE_SUBSCRIPTION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"privateInternetSubscriptionIndication\": \"1\",\n    \"servicePartyStatusCode\": 0,\n    \"declineReason\": \"Not interested\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == NO_SERVICE_SUBSCRIPTION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('NO_SERVICE_SUBSCRIPTION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "19. NO_SERVICE_SUBSCRIPTION → FORMS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FORMS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FORMS'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "20. Forms → WARNINGS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"formsCompleted\": [\n      \"Account Agreement\",\n      \"Privacy Policy\",\n      \"Terms of Service\"\n    ],\n    \"signatureTimestamp\": \"2024-01-15T10:30:00Z\",\n    \"ipAddress\": \"192.168.1.100\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WARNINGS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WARNINGS'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Acknowledge → WELCOME",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"warningsAcknowledged\": [\n      \"Account fees\",\n      \"Transaction limits\",\n      \"Security responsibilities\"\n    ],\n    \"acknowledgmentTimestamp\": \"2024-01-15T10:35:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WELCOME', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WELCOME'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Complete → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_decline}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_decline}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"welcomeMessage\": \"Welcome to our banking services!\",\n    \"completionTimestamp\": \"2024-01-15T10:40:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "03 - Branch: Block at Two More Questions",
      "item": [
        {
          "name": "1. Start Process - Blocked at Questions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_block\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_block', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "Plan STARTED->START_FLOW",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"High School\",\n    \"grade\": \"10th Grade\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 2000,\n    \"expenseCategories\": [\n      \"Food\",\n      \"Transport\",\n      \"Entertainment\"\n    ],\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID123456789\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (not blocked) → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"audioFile\": \"audio_recording.wav\",\n    \"transcription\": \"I confirm that all information provided is accurate\",\n    \"confidence\": 0.95,\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Doc match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\",\n    \"confidence\": 0.98,\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.98\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Upload face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"faceImage\": \"face_photo.jpg\",\n    \"livenessScore\": 0.95,\n    \"faceMatchScore\": 0.92\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\",\n    \"validationScore\": 0.95,\n    \"riskLevel\": \"LOW\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"signatureImage\": \"signature.png\",\n    \"signatureQuality\": \"HIGH\",\n    \"signatureMatchScore\": 0.9\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"activities\": [\n      \"Online Banking\",\n      \"Mobile Banking\",\n      \"ATM Withdrawals\"\n    ],\n    \"preferredChannels\": [\n      \"Mobile\",\n      \"Online\"\n    ],\n    \"expectedTransactions\": 50\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"selectedPackage\": \"STUDENT_BASIC\",\n    \"packageFeatures\": [\n      \"No monthly fee\",\n      \"Free ATM withdrawals\",\n      \"Student discounts\"\n    ],\n    \"packageId\": \"STU001\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Video (continue) → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"videoFile\": \"verification_video.mp4\",\n    \"videoDuration\": 30,\n    \"livenessScore\": 0.95,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"addressType\": \"RESIDENTIAL\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Branch → INFORMATION_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"branchId\": \"BR001\",\n    \"branchName\": \"Downtown Branch\",\n    \"branchAddress\": \"456 Downtown Ave\",\n    \"preferredTime\": \"MORNING\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INFORMATION_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INFORMATION_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Info → TWO_MORE_QUESTIONS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"communicationPreferences\": [\n      \"EMAIL\",\n      \"SMS\"\n    ],\n    \"marketingConsent\": true,\n    \"newsletterSubscription\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == TWO_MORE_QUESTIONS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('TWO_MORE_QUESTIONS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Additional Q (BLOCK) → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_block}}",
                "advance"
              ]
            },
            "description": "Blocked branch",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"question1\": \"Color?\",\n    \"answer1\": \"Blue\",\n    \"question2\": \"Pet?\",\n    \"answer2\": \"Buddy\",\n    \"toBlock\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "04 - Negative Scenarios (Mixed)",
      "item": [
        {
          "name": "1. Start Process - Negatives",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_neg\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_neg', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "3. NEG: Missing occupation → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Expect 409",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['occupation'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Fix occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"HS\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "5. NEG: Missing income fields → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Expect 409",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['income', 'incomeSource'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Fix income → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "7. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 1000,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "8. NEG: Missing document fields → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Expect 409",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['documentType'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Fix doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"LOW\",\n    \"documentNumber\": \"ID000\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));"
                ]
              }
            }
          ]
        },
        {
          "name": "10. STT → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "11. NEG: Match fail 1/3 (stay)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Should remain in PERFORM_MATCH per your config (loop).",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"FAIL\",\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.3\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "12. NEG: Match fail 3/3 → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Max retries reached -> STARTED",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"FAIL\",\n    \"numOfScanMatchTries\": 3,\n    \"matchScore\": 0.3\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Advance after reset → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Income → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 4000,\n    \"incomeSource\": \"Scholarship\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 800,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID321\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));"
                ]
              }
            }
          ]
        },
        {
          "name": "18. STT → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "19. Match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));"
                ]
              }
            }
          ]
        },
        {
          "name": "20. Face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "23. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "24. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "25. Video → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "26. Address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "27. Branch → INFORMATION_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INFORMATION_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INFORMATION_ACTIVITIES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "28. Info → TWO_MORE_QUESTIONS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == TWO_MORE_QUESTIONS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('TWO_MORE_QUESTIONS_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "29. NEG: Missing additional questions → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Expect 409",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['question1'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "30. Fix questions → SERVICE_SUBSCRIPTION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"question1\": \"Q1\",\n    \"answer1\": \"A1\",\n    \"question2\": \"Q2\",\n    \"answer2\": \"A2\",\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SERVICE_SUBSCRIPTION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SERVICE_SUBSCRIPTION'));"
                ]
              }
            }
          ]
        },
        {
          "name": "31. NEG: Missing service fields → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_neg}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_neg}}",
                "advance"
              ]
            },
            "description": "Expect 409 for serviceNeeded inputs",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['privateInternetSubscriptionIndication'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "05 - Negative: Scan Match Always Fails (Numbered)",
      "item": [
        {
          "name": "1. Start Process - ScanMatch FAIL x3",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_sm_fail\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_sm_fail', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"High School\",\n    \"grade\": \"10\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses (continue) → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 1500,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID123\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (not blocked) → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toBlock\": false,\n    \"transcription\": \"I confirm\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Match FAIL 1/3 (stay)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"FAIL\",\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.3\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Match FAIL 2/3 (stay)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"FAIL\",\n    \"numOfScanMatchTries\": 2,\n    \"matchScore\": 0.28\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Match FAIL 3/3 → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"FAIL\",\n    \"numOfScanMatchTries\": 3,\n    \"matchScore\": 0.25\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));"
                ]
              }
            }
          ]
        },
        {
          "name": "11. (Optional) Advance after reset → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_sm_fail}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_sm_fail}}",
                "advance"
              ]
            },
            "description": "Process restarts",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "06 - Negative: Block at Speech-to-Text",
      "item": [
        {
          "name": "1. Start Process - STT Block",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_stt_block\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_stt_block', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 4000,\n    \"incomeSource\": \"Scholarship\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses (continue) → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 900,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID555\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (BLOCK) → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_stt_block}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_stt_block}}",
                "advance"
              ]
            },
            "description": "Early block at STT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toBlock\": true,\n    \"transcription\": \"Stop\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "07 - Negative: Address Preconditions (409)",
      "item": [
        {
          "name": "1. Start Process - Address 409s",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_addr_409\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_addr_409', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 3000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 700,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID777\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Video → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));"
                ]
              }
            }
          ]
        },
        {
          "name": "15. NEG: Missing street/city/state/zip → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "Expect 409",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['streetAddress'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Fix address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_addr_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_addr_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"streetAddress\": \"123 Main\",\n    \"city\": \"NYC\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"addressType\": \"RESIDENTIAL\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "08 - Negative: Forms Preconditions (409)",
      "item": [
        {
          "name": "1. Start Process - Forms 409s",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/start",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "start"
              ]
            },
            "description": "Start MINOR process and capture processId",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"clientId\": \"minor-processId_forms_409\",\n  \"type\": \"MINOR\",\n  \"data\": {\n    \"customerName\": \"John Doe\",\n    \"age\": 16,\n    \"parentId\": \"parent-456\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "const id = r.id || r.processId || r.instanceId || (r.process && r.process.id);",
                  "pm.expect(id, 'process id present').to.be.ok;",
                  "pm.collectionVariables.set('processId_forms_409', id);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. → MINOR_OCCUPATION_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "Plan STARTED->START_FLOW",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == MINOR_OCCUPATION_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('MINOR_OCCUPATION_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Occupation → INCOME_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"occupation\": \"Student\",\n    \"school\": \"High School\",\n    \"grade\": \"10th Grade\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INCOME_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INCOME_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Income (continue) → EXPENSES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"income\": 5000,\n    \"incomeSource\": \"Allowance\",\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == EXPENSES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('EXPENSES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "5. Expenses → GENERATE_SCAN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"monthlyExpenses\": 2000,\n    \"expenseCategories\": [\n      \"Food\",\n      \"Transport\",\n      \"Entertainment\"\n    ],\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == GENERATE_SCAN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('GENERATE_SCAN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Generate doc → SPEECH_TO_TEXT",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"documentType\": \"ID_CARD\",\n    \"scanQuality\": \"HIGH\",\n    \"documentNumber\": \"ID123456789\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SPEECH_TO_TEXT', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SPEECH_TO_TEXT'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "7. STT (not blocked) → PERFORM_MATCH",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"audioFile\": \"audio_recording.wav\",\n    \"transcription\": \"I confirm that all information provided is accurate\",\n    \"confidence\": 0.95,\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == PERFORM_MATCH', ()=> pm.expect(String(r.state||r.currentState)).to.eq('PERFORM_MATCH'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "8. Doc match OK → FACE_RECOGNITION_UPLOAD",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"scanMatch\": \"OK\",\n    \"confidence\": 0.98,\n    \"numOfScanMatchTries\": 1,\n    \"matchScore\": 0.98\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FACE_RECOGNITION_UPLOAD', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FACE_RECOGNITION_UPLOAD'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Upload face → CUSTOMER_INFO_VALIDATION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"faceImage\": \"face_photo.jpg\",\n    \"livenessScore\": 0.95,\n    \"faceMatchScore\": 0.92\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_INFO_VALIDATION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_INFO_VALIDATION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Validate OK → SIGNATURE_EXAMPLE_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"oneToManyStatus\": \"OK\",\n    \"validationScore\": 0.95,\n    \"riskLevel\": \"LOW\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SIGNATURE_EXAMPLE_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SIGNATURE_EXAMPLE_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Signature → ACCOUNT_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"signatureImage\": \"signature.png\",\n    \"signatureQuality\": \"HIGH\",\n    \"signatureMatchScore\": 0.9\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == ACCOUNT_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('ACCOUNT_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Activities → STUDENT_PACKAGES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"activities\": [\n      \"Online Banking\",\n      \"Mobile Banking\",\n      \"ATM Withdrawals\"\n    ],\n    \"preferredChannels\": [\n      \"Mobile\",\n      \"Online\"\n    ],\n    \"expectedTransactions\": 50\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STUDENT_PACKAGES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STUDENT_PACKAGES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "13. Packages → VIDEO_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"selectedPackage\": \"STUDENT_BASIC\",\n    \"packageFeatures\": [\n      \"No monthly fee\",\n      \"Free ATM withdrawals\",\n      \"Student discounts\"\n    ],\n    \"packageId\": \"STU001\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == VIDEO_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('VIDEO_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Video (continue) → CUSTOMER_ADDRESS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"videoFile\": \"verification_video.mp4\",\n    \"videoDuration\": 30,\n    \"livenessScore\": 0.95,\n    \"toContinue\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CUSTOMER_ADDRESS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CUSTOMER_ADDRESS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Address → CHOOSE_BRANCH_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"addressType\": \"RESIDENTIAL\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == CHOOSE_BRANCH_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('CHOOSE_BRANCH_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Branch → INFORMATION_ACTIVITIES_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"branchId\": \"BR001\",\n    \"branchName\": \"Downtown Branch\",\n    \"branchAddress\": \"456 Downtown Ave\",\n    \"preferredTime\": \"MORNING\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == INFORMATION_ACTIVITIES_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('INFORMATION_ACTIVITIES_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Info → TWO_MORE_QUESTIONS_SCREEN",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"communicationPreferences\": [\n      \"EMAIL\",\n      \"SMS\"\n    ],\n    \"marketingConsent\": true,\n    \"newsletterSubscription\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == TWO_MORE_QUESTIONS_SCREEN', ()=> pm.expect(String(r.state||r.currentState)).to.eq('TWO_MORE_QUESTIONS_SCREEN'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Additional Q → SERVICE_SUBSCRIPTION",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"question1\": \"What is your favorite color?\",\n    \"answer1\": \"Blue\",\n    \"question2\": \"What was your first pet's name?\",\n    \"answer2\": \"Buddy\",\n    \"toBlock\": false\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == SERVICE_SUBSCRIPTION', ()=> pm.expect(String(r.state||r.currentState)).to.eq('SERVICE_SUBSCRIPTION'));",
                  "pm.test('screenCode present', ()=> pm.expect(r.screenCode).to.be.a('string').and.not.empty);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Subscribe → FORMS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"privateInternetSubscriptionIndication\": \"0\",\n    \"servicePartyStatusCode\": 1\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == FORMS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('FORMS'));"
                ]
              }
            }
          ]
        },
        {
          "name": "19. NEG: Missing forms → 409",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "Expect 409 for forms fields",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 409', ()=> pm.response.code===409);",
                  "const r = pm.response.json();",
                  "pm.test('error PRECONDITIONS_NOT_MET', ()=> pm.expect(r.error).to.eql('PRECONDITIONS_NOT_MET'));",
                  "pm.test('missing contains required fields', ()=> { const m = (r.missing||[]).map(String); ['formsCompleted'].forEach(f=> pm.expect(m, 'missing '+f).to.include(f)); });"
                ]
              }
            }
          ]
        },
        {
          "name": "20. Fix forms → WARNINGS",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"formsCompleted\": [\n      \"Account Agreement\"\n    ],\n    \"signatureTimestamp\": \"2024-01-15T10:30:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WARNINGS', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WARNINGS'));"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Acknowledge → WELCOME",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"warningsAcknowledged\": [\n      \"Account fees\"\n    ],\n    \"acknowledgmentTimestamp\": \"2024-01-15T10:35:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == WELCOME', ()=> pm.expect(String(r.state||r.currentState)).to.eq('WELCOME'));"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Complete → STARTED",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/process/{{processId_forms_409}}/advance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "process",
                "{{processId_forms_409}}",
                "advance"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"welcomeMessage\": \"Welcome!\",\n    \"completionTimestamp\": \"2024-01-15T10:40:00Z\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP 200', ()=> pm.response.code===200);",
                  "const r = pm.response.json();",
                  "pm.test('state == STARTED', ()=> pm.expect(String(r.state||r.currentState)).to.eq('STARTED'));"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}